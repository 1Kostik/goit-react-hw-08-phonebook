{"version":3,"file":"static/js/586.e492da04.chunk.js","mappings":"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","sources":["components/App/App.styled.jsx","redux/selectors.js","components/ContactForm/ContactForm.styled.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 40px auto;\n  padding: 20px;\n  max-width: 450px;\n  text-align: center;\n  background-color: rgb(147 220 255);\n  box-shadow: 0px 8px 30px rgba(12, 4, 35, 0.1);\n  border-radius: 10px;\n`;\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  padding: 5px;\n  font-size: 44px;\n  text-shadow: 0px 8px 30px rgba(12, 4, 35, 0.1);\n  background-color: rgb(207 241 255);\n  box-shadow: 0px 8px 30px rgba(12, 4, 35, 0.1);\n  border-radius: 10px;\n`;\n\nexport const Subtitle = styled.h2`\n  margin-bottom: 20px;\n  padding: 5px;\n  font-size: 32px;\n  text-shadow: 0px 8px 30px rgba(12, 4, 35, 0.1);\n  background-color: rgb(207 241 255);\n  box-shadow: 0px 8px 30px rgba(12, 4, 35, 0.1);\n  border-radius: 10px;\n`;\n","export const getContacts = state => state.contacts.items;\nexport const getContactFilter = state => state.filter;\nexport const getIsLoading = state => state.tasks.isLoading;\nexport const getError = state => state.tasks.error;\n\n","import styled from '@emotion/styled';\nexport const Container = styled.form`\n  margin: 0 auto;\n  margin-bottom: 20px;\n  padding: 20px;\n  max-width: 50%;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n  font-weight: 500;\n  font-size: 24px;\n`;\n\nexport const Input = styled.input`\n  padding: 5px 10px;\n  width: 100%;\n  font-size: 24px;\n  border: none;\n  border-radius: 5px;\n`;\n\nexport const Btn = styled.button`\n  padding: 10px 25px;\n  margin-top: 20px;\n  font-size: 24px;\n  font-weight: 500;\n  background-color: rgb(207 241 255);\n  border-radius: 5px;\n  cursor: pointer;\n  transition: all 250ms ease-in-out;\n  :hover {\n    background-color: rgb(13 172 242);\n  }\n`;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { addContact } from 'redux/contactsOperations';\nimport { Container, Input, Label, Btn } from './ContactForm.styled';\nimport { nanoid } from 'nanoid';\n// import { ToastContainer, toast } from 'react-toastify';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    if (\n      contacts.find(\n        contact =>\n          contact.name === newContact.name ||\n          contact.number === newContact.number\n      )\n    ) {\n      return alert(\n        `${newContact.name} or ${newContact.number} is already in contacts`\n      );\n    }\n   \n    dispatch(addContact(newContact));\n\n    // toast.success(`${name} added in contacts`);\n    reset();\n  };\n \n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <>\n      <Container onSubmit={handleSubmit}>\n        <Label>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n        </Label>\n        <Label>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={e => setNumber(e.target.value)}\n          />\n        </Label>\n        <Btn type=\"submit\">Add contacts</Btn>\n      </Container>\n      {/* <ToastContainer /> */}\n    </>\n  );\n}\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  margin: 0 auto;\n  margin-bottom: 30px;\n  max-width: 50%;\n\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n  font-weight: 500;\n  font-size: 24px;\n  text-shadow: 0px 8px 30px rgba(12, 4, 35, 0.1);\n`;\n\nexport const Input = styled.input`\n  padding: 5px 10px;\n  width: 100%;\n  font-size: 24px;\n  border: none;\n  border-radius: 5px;\n  box-shadow: 0px 8px 30px rgba(12, 4, 35, 0.1);\n`;\n","import { Wrapper, Label, Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactFilter } from 'redux/selectors';\nimport { setContactFilter } from 'redux/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getContactFilter);\n\n  return (\n    <Wrapper>\n      <Label htmlFor=\"filter\">Find contacts by name</Label>\n      <Input\n        name=\"filter\"\n        type=\"text\"\n        id=\"filter\"\n        value={filter}\n        onChange={e => dispatch(setContactFilter(e.currentTarget.value))}\n      />\n    </Wrapper>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Contacts = styled.ul`\n  margin: 0 auto;\n  max-width: 90%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 15px;\n`;\n\nexport const ContactsItem = styled.li`\n  padding: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 30px;\n  background-color: rgb(207 241 255);\n  box-shadow: 0px 8px 30px rgba(12, 4, 35, 0.1);\n  border-radius: 5px;\n`;\n\nexport const Name = styled.span`\n  text-align: left;\n  font-size: 22px;\n  flex-basis: 33.333%;\n`;\n\nexport const Number = styled.span`\n  text-align: right;\n  font-weight: 500;\n  font-size: 22px;\n  flex-basis: 33.333%;\n`;\n\nexport const Btn = styled.button`\n  padding: 5px 15px;\n  flex-basis: 15%;\n  font-size: 18px;\n  font-weight: 500;\n  border-radius: 5px;\n  box-shadow: 0px 8px 30px rgba(12, 4, 35, 0.1);\n  cursor: pointer;\n  transition: all 250ms ease-in-out;\n  background-color: rgb(207 241 255);\n  :hover {\n    background-color: rgb(13 172 242);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getContactFilter, getContacts } from 'redux/selectors';\nimport { deleteContact } from 'redux/contactsOperations';\nimport {\n  Btn,\n  Contacts,\n  ContactsItem,\n  Name,\n  Number,\n} from './ContactList.styled';\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getContactFilter);\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  return (\n    <>\n      <Contacts>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactsItem key={id}>\n              <Name>{name}</Name>\n              <Number>{number}</Number>\n              <Btn type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n                Delete\n              </Btn>\n            </ContactsItem>\n          );\n        })}\n      </Contacts>\n    </>\n  );\n};\n\nexport default ContactList;\n","import React, { useEffect } from 'react';\nimport { Container, Subtitle, Title } from '../components/App/App.styled';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from '../redux/contactsOperations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <Subtitle>Contacts</Subtitle>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n"],"names":["Container","styled","Title","Subtitle","getContacts","state","contacts","items","getContactFilter","filter","Label","Input","Btn","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","reset","onSubmit","e","preventDefault","newContact","find","contact","alert","addContact","type","pattern","title","required","value","onChange","target","Wrapper","htmlFor","setContactFilter","currentTarget","Contacts","ContactsItem","Name","Number","filteredContacts","toLowerCase","includes","map","onClick","deleteContact","useEffect","fetchContacts"],"sourceRoot":""}